package org.example.extraBuilder;

import com.squareup.javapoet.*;
import io.vavr.Tuple;

import javax.lang.model.element.Modifier;
import javax.tools.JavaFileObject;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import java.io.IOException;
import java.io.Writer;

import static org.example.extraBuilder.GenerationConfig.createGetter;
import static org.example.extraBuilder.GenerationConfig.createSetter;

public class GenContentClass {
    public static void genContentClass(GenerationConfig config) {

        AnnotationSpec xmlElement = AnnotationSpec.builder(XmlElement.class)
                .build();

        FieldSpec field1Spec = FieldSpec.builder(config.getLetter(), "letter", Modifier.PRIVATE).build();
        FieldSpec field2Spec = FieldSpec.builder(config.getEmail(), "email", Modifier.PRIVATE).build();
        FieldSpec field3Spec = FieldSpec.builder(config.getSms(), "sms", Modifier.PRIVATE).build();
        MethodSpec method1Setter = createSetter(Tuple.of(config.getLetter(), field1Spec))
                .addAnnotation(xmlElement)
                .build();
        MethodSpec method2Setter = createSetter(Tuple.of(config.getEmail(), field2Spec))
                .addAnnotation(xmlElement)
                .build();
        MethodSpec method3Setter = createSetter(Tuple.of(config.getSms(), field3Spec))
                .addAnnotation(xmlElement)
                .build();
        MethodSpec method1Getter = createGetter(Tuple.of(config.getLetter(), field1Spec)).build();
        MethodSpec method2Getter = createGetter(Tuple.of(config.getEmail(), field2Spec)).build();
        MethodSpec method3Getter = createGetter(Tuple.of(config.getSms(), field3Spec)).build();

        AnnotationSpec xmlRootElement = AnnotationSpec.builder(XmlRootElement.class)
                .addMember("name", "$S", config.getContentClassStr())
                .build();

        AnnotationSpec contentClassAnnotation = AnnotationSpec.builder(ContentClass.class)
                .addMember("code", "$S", config.getCodePair()._1)
                .build();

        TypeSpec contentClass = TypeSpec.classBuilder(config.getContentClassStr())
                .addAnnotation(contentClassAnnotation)
                .addJavadoc("Generated by ExtraBuilderProcessor")
                .addAnnotation(xmlRootElement)
                .addModifiers(Modifier.PUBLIC)
                .addField(field1Spec)
                .addField(field2Spec)
                .addField(field3Spec)
                .addMethod(method1Setter)
                .addMethod(method2Setter)
                .addMethod(method3Setter)
                .addMethod(method1Getter)
                .addMethod(method2Getter)
                .addMethod(method3Getter)
//                .addMethod(main)
                .build();


        JavaFile javaFile = JavaFile.builder(config.getBasePackage(), contentClass)
                .build();

        try {
            JavaFileObject builderFile = config.getEnvironment().getFiler().createSourceFile(config.fullContentClassStr());
            try (
                    Writer writer = builderFile.openWriter();
            ) {
                javaFile.writeTo(writer);
                writer.flush();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}
